# Generated by Django 3.2.25 on 2024-07-20 16:58

import account.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('school', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.TextField(unique=True)),
                ('email', models.TextField(null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('admin_type', models.TextField(default='Regular User')),
                ('problem_permission', models.TextField(default='None')),
                ('reset_password_token', models.TextField(null=True)),
                ('reset_password_token_expire_time', models.DateTimeField(null=True)),
                ('auth_token', models.TextField(null=True)),
                ('two_factor_auth', models.BooleanField(default=False)),
                ('tfa_token', models.TextField(null=True)),
                ('session_keys', models.JSONField(default=list)),
                ('open_api', models.BooleanField(default=False)),
                ('open_api_appkey', models.TextField(null=True)),
                ('is_disabled', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', account.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserScore',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='account.user')),
                ('yesterday_score', models.IntegerField(default=0)),
                ('total_score', models.IntegerField(default=0)),
                ('fluctuation', models.IntegerField(default=0)),
                ('math_score', models.BigIntegerField(default=0)),
                ('implementation_score', models.BigIntegerField(default=0)),
                ('datastructure_score', models.BigIntegerField(default=0)),
                ('search_score', models.BigIntegerField(default=0)),
                ('sorting_score', models.BigIntegerField(default=0)),
                ('VeryLow_score', models.BigIntegerField(default=0)),
                ('Low_score', models.BigIntegerField(default=0)),
                ('Mid_score', models.BigIntegerField(default=0)),
                ('High_score', models.BigIntegerField(default=0)),
                ('VeryHigh_score', models.BigIntegerField(default=0)),
                ('tier', models.TextField(default=account.models.get_default_tier)),
                ('current_tier_score', models.IntegerField(default=account.models.get_default_current_tier_score)),
                ('next_tier_score', models.IntegerField(default=account.models.get_default_next_tier_score)),
            ],
            options={
                'db_table': 'user_score',
            },
        ),
        migrations.CreateModel(
            name='UserSolved',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='account.user')),
                ('math_solved', models.BigIntegerField(default=0)),
                ('implementation_solved', models.BigIntegerField(default=0)),
                ('datastructure_solved', models.BigIntegerField(default=0)),
                ('search_solved', models.BigIntegerField(default=0)),
                ('sorting_solved', models.BigIntegerField(default=0)),
                ('VeryLow_solved', models.BigIntegerField(default=0)),
                ('Low_solved', models.BigIntegerField(default=0)),
                ('Mid_solved', models.BigIntegerField(default=0)),
                ('High_solved', models.BigIntegerField(default=0)),
                ('VeryHigh_solved', models.BigIntegerField(default=0)),
                ('max_miracle', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'user_solved',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acm_problems_status', models.JSONField(default=dict)),
                ('oi_problems_status', models.JSONField(default=dict)),
                ('real_name', models.TextField(null=True)),
                ('student_id', models.CharField(max_length=9, null=True, validators=[django.core.validators.RegexValidator(code='invalid_student_id', message='학번은 6자리 이상 9자리 이하의 숫자만 입력 가능합니다.', regex='^\\d{6,9}$')])),
                ('avatar', models.TextField(default='/public/avatar/default.png')),
                ('blog', models.URLField(null=True)),
                ('mood', models.TextField(null=True)),
                ('github', models.TextField(null=True)),
                ('school', models.TextField(null=True)),
                ('major', models.TextField(null=True)),
                ('language', models.TextField(null=True)),
                ('accepted_number', models.IntegerField(default=0)),
                ('total_score', models.BigIntegerField(default=0)),
                ('submission_number', models.IntegerField(default=0)),
                ('college', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='school.college')),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='school.department')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profile',
            },
        ),
    ]
